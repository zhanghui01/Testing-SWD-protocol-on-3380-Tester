<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\soc_ft.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\soc_ft.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sun Jan 20 14:15:43 2019
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tempProcess &rArr; ra0TempAdjust &rArr; temperLinePro &rArr; mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">LCDPump_QC</a> from lcd_pump.o(.text) referenced from test_all.o(.constdata)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">SAR_QC</a> from sar.o(.text) referenced from test_all.o(.constdata)
 <LI><a href="#[17]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">Voltage_QC</a> from voltage.o(.text) referenced from test_all.o(.constdata)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[30]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2d]">main</a> from ft_main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[32]">tempProcess</a> from temper_process.o(.text) referenced from test_all.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[35]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[113]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[114]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[115]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[116]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[117]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[118]"></a>SER_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>SER_PutChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ff]"></a>SER_GetChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[3d]"></a>uartInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>spiInit</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInit
</UL>

<P><STRONG><a name="[f0]"></a>spiSendByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsDataRead
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsOffsetCal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegRead
</UL>

<P><STRONG><a name="[f1]"></a>spiReceByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsDataRead
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegRead
</UL>

<P><STRONG><a name="[119]"></a>spiExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>tempProcess</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, temper_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tempProcess &rArr; ra0TempAdjust &rArr; temperLinePro &rArr; mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdInitial
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swdInitial
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_all.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 514 bytes, Stack size 0 bytes, ft_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = main &rArr; test_all &rArr; atf_img_run &rArr; atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_SP0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_LCD3V3
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_FUNTION
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishTest
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_SP0_Pass
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_LCD3V3_Pass
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_FUNTION_Pass
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_fl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_ee
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_DISLowPwr_FT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefEna
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefDis
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_31Ena
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_sram_FT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_FT
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAVDDEna
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ini_Test
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5b]"></a>atf_img_exec</STRONG> (Thumb, 172 bytes, Stack size 184 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_halted_chk
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_haltexit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_core_reg_wr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_core_reg_rd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
</UL>

<P><STRONG><a name="[63]"></a>atf_mem_verify</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = atf_mem_verify &rArr; swd_mem_verf &rArr; swd_mem_verf_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
</UL>

<P><STRONG><a name="[67]"></a>atf_flash_wr</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atf_flash_wr &rArr; atf_mip_wait_timeout &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mip_wait_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
</UL>

<P><STRONG><a name="[69]"></a>atf_remap_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = atf_remap_set &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
</UL>

<P><STRONG><a name="[6a]"></a>soc_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = soc_init &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
</UL>

<P><STRONG><a name="[6b]"></a>atf_flash_img_load</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = atf_flash_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_remap_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_wr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mem_verify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
</UL>

<P><STRONG><a name="[6c]"></a>atf_eeprom_wr</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atf_eeprom_wr &rArr; atf_mip_wait_timeout &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mip_wait_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
</UL>

<P><STRONG><a name="[6d]"></a>atf_eeprom_img_load</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = atf_eeprom_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_wr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_remap_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mem_verify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
</UL>

<P><STRONG><a name="[6e]"></a>atf_sram_wr</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = atf_sram_wr &rArr; swd_mem_wr_mem &rArr; swd_mem_wr_1k_mem &rArr; swd_ap_wr_mem &rArr; swd_dp_wr_mem &rArr; __swd_dp_wr_i_mem &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_mem
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
</UL>

<P><STRONG><a name="[70]"></a>atf_sram_img_load</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_wr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_remap_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mem_verify
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
</UL>

<P><STRONG><a name="[71]"></a>atf_img_run</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = atf_img_run &rArr; atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_DISLowPwr_FT
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_sram_FT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_FT
</UL>

<P><STRONG><a name="[72]"></a>atf_img_monitor</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atf_img_monitor &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
</UL>

<P><STRONG><a name="[73]"></a>SocPwrDown</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, swd_atf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7e]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swd_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd_mem
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr_mem
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
</UL>

<P><STRONG><a name="[77]"></a>swd_parity_cal</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = swd_parity_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr_mem
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i_mem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
</UL>

<P><STRONG><a name="[75]"></a>swd_tx8</STRONG> (Thumb, 886 bytes, Stack size 0 bytes, swd_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_kickoff
</UL>

<P><STRONG><a name="[74]"></a>swd_pkt_kickoff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swd_pkt_kickoff
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx8
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
</UL>

<P><STRONG><a name="[78]"></a>swd_rx</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swd_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i_mem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
</UL>

<P><STRONG><a name="[76]"></a>swd_pkt_req</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx8
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i_mem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
</UL>

<P><STRONG><a name="[7b]"></a>swd_tx</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_line_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
</UL>

<P><STRONG><a name="[7a]"></a>swd_tx32</STRONG> (Thumb, 3220 bytes, Stack size 0 bytes, swd_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
</UL>

<P><STRONG><a name="[79]"></a>swd_fault_clear</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = swd_fault_clear &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_kickoff
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd_mem
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr_mem
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
</UL>

<P><STRONG><a name="[7c]"></a>__swd_dp_wr_i</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_kickoff
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
</UL>

<P><STRONG><a name="[7d]"></a>swd_dp_wr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_ctrl_n_stat_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_apacc_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
</UL>

<P><STRONG><a name="[7f]"></a>swd_ap_wr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = swd_ap_wr &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k_mem
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf_1k
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd_1k
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k
</UL>

<P><STRONG><a name="[81]"></a>swd_rx32</STRONG> (Thumb, 2336 bytes, Stack size 0 bytes, swd_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i_mem
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
</UL>

<P><STRONG><a name="[80]"></a>__swd_dp_rd_i</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __swd_dp_rd_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_kickoff
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
</UL>

<P><STRONG><a name="[82]"></a>swd_dp_rd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = swd_dp_rd &rArr; __swd_dp_rd_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k_mem
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf_1k
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_line_reset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_ctrl_n_stat_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd_1k
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd
</UL>

<P><STRONG><a name="[83]"></a>swd_ap_rd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = swd_ap_rd &rArr; swd_dp_rd &rArr; __swd_dp_rd_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k_mem
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf_1k
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd_1k
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k
</UL>

<P><STRONG><a name="[84]"></a>swd_apacc_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k_mem
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf_1k
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd_1k
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k
</UL>

<P><STRONG><a name="[85]"></a>swd_mem_wr_1k</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_apacc_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>

<P><STRONG><a name="[68]"></a>swd_mem_wr</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_adr_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816ctrl_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPumpDis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_pwr_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_21Ena
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLcdIoCfg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR_QC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_GPIO_Ini
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Fun_Ini
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_CLK_Ini
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMip
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_disable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_step
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_disable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_hardfault_vc_disable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_disable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_hardfault_vc_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_disable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_haltexit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_core_reg_wr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_core_reg_rd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPwrDown
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_wr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_wr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_remap_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_wr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefEna
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefDis
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_31Ena
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAVDDEna
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim_write
</UL>

<P><STRONG><a name="[86]"></a>mem_wr_reg32</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mem_wr_reg32 &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splineUpdateCheck
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra9103ADCInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swdInitial
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperLinePro
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra9103_initail
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
</UL>

<P><STRONG><a name="[87]"></a>mem_wr_reg8</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mem_wr_reg8 &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperLinePro
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
</UL>

<P><STRONG><a name="[88]"></a>swd_mem_rd_1k</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_apacc_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[61]"></a>swd_mem_rd</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd_1k
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_adr_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816ctrl_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPumpDis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_pwr_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_21Ena
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLcdIoCfg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_GPIO_Ini
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Fun_Ini
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_CLK_Ini
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_match_chk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_sregrdy_chk
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_step
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_disable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_hardfault_vc_disable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_disable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_enable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_hardfault_vc_enable
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_svc_chk
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_numcomp_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_numcode_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_sleep_chk
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_lockup_chk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_retire_st_chk
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_watch_chk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_break_chk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_vector_capture_chk
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ext_dbg_req_chk
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_hardfault_vc_en_chk
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_en_chk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_en_chk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_en_chk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_detect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_st_chk
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_en_chk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_state_chk
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra9103_initail
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_disable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_halted_chk
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_haltexit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_core_reg_wr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_core_reg_rd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_monitor
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_wr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_wr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mip_wait_timeout
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_fl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_ee
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefEna
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefDis
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_31Ena
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAVDDEna
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim_write
</UL>

<P><STRONG><a name="[89]"></a>mem_rd_reg32</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splineUpdateCheck
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra9103ADCInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swdInitial
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperLinePro
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
</UL>

<P><STRONG><a name="[8a]"></a>mem_rd_reg8</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mem_rd_reg8 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
</UL>

<P><STRONG><a name="[8b]"></a>ra9103_initail</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ra9103_initail &rArr; mem_wr_reg32 &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swdInitial
</UL>

<P><STRONG><a name="[40]"></a>swd_drv_init</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, swd_drv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swdInitial
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_SAR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_DISLowpwr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_FUNTION
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>swd_rx8</STRONG> (Thumb, 786 bytes, Stack size 0 bytes, swd_drv.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>swd_nop</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, swd_drv.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__swd_dp_wr_i_mem</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __swd_dp_wr_i_mem &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx32
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr_mem
</UL>

<P><STRONG><a name="[8d]"></a>__swd_dp_rd_i_mem</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_pkt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_rx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd_mem
</UL>

<P><STRONG><a name="[8e]"></a>swd_dp_wr_mem</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = swd_dp_wr_mem &rArr; __swd_dp_wr_i_mem &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_parity_cal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr_mem
</UL>

<P><STRONG><a name="[8f]"></a>swd_dp_rd_mem</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i_mem
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_fault_clear
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd_mem
</UL>

<P><STRONG><a name="[90]"></a>swd_dp_ctrl_n_stat_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = swd_dp_ctrl_n_stat_get &rArr; swd_dp_rd &rArr; __swd_dp_rd_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
</UL>

<P><STRONG><a name="[91]"></a>swd_dp_ctrl_n_stat_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = swd_dp_ctrl_n_stat_set &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
</UL>

<P><STRONG><a name="[92]"></a>swd_line_reset</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = swd_line_reset &rArr; swd_dp_rd &rArr; __swd_dp_rd_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
</UL>

<P><STRONG><a name="[11e]"></a>swd_ctrl_n_stat_prn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, swd_drv.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>swd_debug_state_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_haltexit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
</UL>

<P><STRONG><a name="[94]"></a>swd_debug_en_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = swd_debug_en_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_step
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
</UL>

<P><STRONG><a name="[95]"></a>swd_debug_enable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = swd_debug_enable &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_step
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
</UL>

<P><STRONG><a name="[43]"></a>swd_debug_halt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = swd_debug_halt &rArr; swd_debug_enable &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_en_chk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_state_chk
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>swd_reset_st_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_reset
</UL>

<P><STRONG><a name="[42]"></a>swd_debug_reset</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_st_chk
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>swd_connect</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_line_reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_ctrl_n_stat_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_ctrl_n_stat_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_reset
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swdInitial
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_adr_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816ctrl_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMip
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_DISLowpwr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_DISLowPwr_FT
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_sram_FT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_FT
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>soc_detect</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[99]"></a>swd_bpu_en_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[9a]"></a>swd_dwt_en_chk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[9b]"></a>swd_reset_vc_en_chk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[9c]"></a>swd_hardfault_vc_en_chk</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[9d]"></a>swd_ext_dbg_req_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[9e]"></a>swd_vector_capture_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[9f]"></a>swd_break_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[a0]"></a>swd_watch_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[5e]"></a>swd_halted_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = swd_halted_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
</UL>

<P><STRONG><a name="[a1]"></a>swd_retire_st_chk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[a2]"></a>swd_lockup_chk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[a3]"></a>swd_sleep_chk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[a4]"></a>swd_bpu_numcode_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[a5]"></a>swd_dwt_numcomp_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dap_detect
</UL>

<P><STRONG><a name="[a6]"></a>swd_dap_detect</STRONG> (Thumb, 1092 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_numcomp_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_numcode_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_sleep_chk
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_lockup_chk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_retire_st_chk
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_watch_chk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_break_chk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_vector_capture_chk
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ext_dbg_req_chk
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_hardfault_vc_en_chk
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_vc_en_chk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dwt_en_chk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_bpu_en_chk
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset_st_chk
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_state_chk
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_line_reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_ctrl_n_stat_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_ctrl_n_stat_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_apacc_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_halted_chk
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
</UL>

<P><STRONG><a name="[a7]"></a>swd_ap_rd_mem</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd_mem
</UL>

<P><STRONG><a name="[a8]"></a>swd_ap_wr_mem</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = swd_ap_wr_mem &rArr; swd_dp_wr_mem &rArr; __swd_dp_wr_i_mem &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_wr_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k_mem
</UL>

<P><STRONG><a name="[a9]"></a>swd_mem_verf_1k</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_mem_verf_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_apacc_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf
</UL>

<P><STRONG><a name="[64]"></a>swd_mem_verf</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_mem_verf &rArr; swd_mem_verf_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_verf_1k
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mem_verify
</UL>

<P><STRONG><a name="[aa]"></a>swd_mem_wr_1k_mem</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_mem_wr_1k_mem &rArr; swd_ap_wr_mem &rArr; swd_dp_wr_mem &rArr; __swd_dp_wr_i_mem &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr_mem
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_apacc_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_rd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_dp_rd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_ap_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_mem
</UL>

<P><STRONG><a name="[6f]"></a>swd_mem_wr_mem</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_mem_wr_mem &rArr; swd_mem_wr_1k_mem &rArr; swd_ap_wr_mem &rArr; swd_dp_wr_mem &rArr; __swd_dp_wr_i_mem &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr_1k_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_wr
</UL>

<P><STRONG><a name="[62]"></a>swd_core_reg_rd</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = swd_core_reg_rd &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
</UL>

<P><STRONG><a name="[5d]"></a>swd_core_reg_wr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = swd_core_reg_wr &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
</UL>

<P><STRONG><a name="[ab]"></a>swd_svc_chk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[ac]"></a>swd_dwt_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[ad]"></a>swd_hardfault_vc_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[ae]"></a>swd_reset_vc_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[af]"></a>swd_dwt_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[b0]"></a>swd_hardfault_vc_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[5f]"></a>swd_reset_vc_disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = swd_reset_vc_disable &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
</UL>

<P><STRONG><a name="[b1]"></a>swd_debug_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[60]"></a>swd_debug_haltexit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, swd_drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_state_chk
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
</UL>

<P><STRONG><a name="[b2]"></a>swd_debug_step</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_en_chk
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[b3]"></a>swd_sregrdy_chk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[b4]"></a>swd_dwt_match_chk</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[b5]"></a>swd_dwt_set</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>

<P><STRONG><a name="[b6]"></a>swd_dwt_get</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[b7]"></a>swd_bpu_enable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>

<P><STRONG><a name="[b8]"></a>swd_bpu_disable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>

<P><STRONG><a name="[b9]"></a>swd_bpu_set</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
</UL>

<P><STRONG><a name="[ba]"></a>swd_bpu_get</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, swd_drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
</UL>

<P><STRONG><a name="[66]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, system_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_monitor
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_mip_wait_timeout
</UL>

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>exitFail</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempProcess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_fl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_ee
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>empty_check_fl</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = empty_check_fl &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>empty_check_ee</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = empty_check_ee &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>exitPass</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>exit_UID_check_PASS</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
</UL>

<P><STRONG><a name="[4c]"></a>exit_SP0_Pass</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>exit_LCD3V3_Pass</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>exit_FUNTION_Pass</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>exit_SAR_Pass</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>Ini_Test</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>finishTest</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>debugTest</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>wait_clrmip</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wait_clrmip &rArr; clearMip &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMip
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_fl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_ee
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>wait_start</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wait_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>usDelay</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usDelay &rArr; SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMip
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[bd]"></a>msDelay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = msDelay &rArr; usDelay &rArr; SystemCoreClockUpdate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_DISLowpwr
</UL>

<P><STRONG><a name="[be]"></a>wait_DISLowpwr</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_DISLowPwr_FT
</UL>

<P><STRONG><a name="[49]"></a>wait_SP0</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wait_SP0
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>wait_LCD3V3</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>wait_FUNTION</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wait_FUNTION
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>wait_SAR</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, board.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
</UL>

<P><STRONG><a name="[bc]"></a>clearMip</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, test_all.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = clearMip &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
</UL>

<P><STRONG><a name="[c0]"></a>SocChipCheck</STRONG> (Thumb, 292 bytes, Stack size 152 bytes, test_all.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SocChipCheck &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
</UL>

<P><STRONG><a name="[51]"></a>test_all</STRONG> (Thumb, 1382 bytes, Stack size 32 bytes, test_all.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = test_all &rArr; atf_img_run &rArr; atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swDelay
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_GPIO_Ini
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Fun_Ini
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_CLK_Ini
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocChipCheck
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMip
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_monitor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_debug_halt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>DownLoad</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, test_all.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[52]"></a>SocLowPwr_sram_FT</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, test_all.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SocLowPwr_sram_FT &rArr; atf_img_run &rArr; atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>SocLowPwr_FT</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, test_all.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SocLowPwr_FT &rArr; atf_img_run &rArr; atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>Soc_DISLowPwr_FT</STRONG> (Thumb, 716 bytes, Stack size 16 bytes, test_all.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Soc_DISLowPwr_FT &rArr; atf_img_run &rArr; atf_sram_img_load &rArr; atf_img_exec &rArr; swd_debug_haltexit &rArr; swd_debug_state_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_DISLowpwr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>ADS1243GetValue</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADS1243GetValue &rArr; adsInitvdd &rArr; adsDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInitvdd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsDataRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
</UL>

<P><STRONG><a name="[45]"></a>SocAVDDEna</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SocAVDDEna &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>Voltage_QC</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Voltage_QC &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1243GetValue
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAVDDEna
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_all.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>SocVrefEna</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SocVrefEna &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>SocVrefDis</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, voltage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SocVrefDis &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>LCDPump_QC</STRONG> (Thumb, 1466 bytes, Stack size 24 bytes, lcd_pump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LCDPump_QC &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcExit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_21Ena
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_all.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>LCD3V3</STRONG> (Thumb, 626 bytes, Stack size 24 bytes, lcd_pump.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCD3V3 &rArr; SocLcdIoCfg &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcExit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLcdIoCfg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>adcInit</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[d8]"></a>adcExit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[d4]"></a>adcGetValue</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adcGetValue &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[4b]"></a>SocPump_31Ena</STRONG> (Thumb, 676 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SocPump_31Ena &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>SocPump_21Ena</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SocPump_21Ena &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
</UL>

<P><STRONG><a name="[dc]"></a>Normal_pwr_init</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d9]"></a>SocLcdIoCfg</STRONG> (Thumb, 748 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SocLcdIoCfg &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[dd]"></a>SocPumpDis</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[44]"></a>UID_check</STRONG> (Thumb, 682 bytes, Stack size 16 bytes, spline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UID_check &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_UID_check_PASS
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>UID_adr_read</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, spline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UID_adr_read &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
</UL>

<P><STRONG><a name="[57]"></a>FT_UID_write</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, spline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FT_UID_write &rArr; mem_rd_reg8 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumGen32
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg8
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>sp0LinePro</STRONG> (Thumb, 1418 bytes, Stack size 88 bytes, spline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sp0LinePro &rArr; rcl_trim &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumGen32
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_adr_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816ctrl_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>temperLinePro</STRONG> (Thumb, 306 bytes, Stack size 144 bytes, spline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = temperLinePro &rArr; mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumGen32
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg8
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
</UL>

<P><STRONG><a name="[e1]"></a>sumGen32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sumGen32
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperLinePro
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
</UL>

<P><STRONG><a name="[e9]"></a>average</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = average
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
</UL>

<P><STRONG><a name="[c5]"></a>swDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stampThrough
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsOffsetCal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegRead
</UL>

<P><STRONG><a name="[ec]"></a>max2min</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = max2min
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
</UL>

<P><STRONG><a name="[3a]"></a>swdInitial</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = swdInitial &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra9103_initail
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempProcess
</UL>

<P><STRONG><a name="[e6]"></a>ra9103ADCInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ra0_routine.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
</UL>

<P><STRONG><a name="[3b]"></a>ra0TempAdjust</STRONG> (Thumb, 1604 bytes, Stack size 104 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ra0TempAdjust &rArr; temperLinePro &rArr; mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquireInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max2min
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperLinePro
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swDelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempProcess
</UL>

<P><STRONG><a name="[ed]"></a>splineUpdateCheck</STRONG> (Thumb, 572 bytes, Stack size 8 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = splineUpdateCheck &rArr; mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStd
</UL>

<P><STRONG><a name="[ee]"></a>resetStd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = resetStd &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;splineUpdateCheck
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_drv_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdInitial
</UL>

<P><STRONG><a name="[38]"></a>stdInitial</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = stdInitial &rArr; resetStd &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetStd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempProcess
</UL>

<P><STRONG><a name="[39]"></a>stdTempAcquire</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, ra0_routine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = stdTempAcquire &rArr; mem_rd_reg32 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stampThrough
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max2min
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swDelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_rd_reg32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_wr_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempProcess
</UL>

<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>timer3Init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempProcess
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>stampThrough</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdTempAcquire
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swDelay
</UL>

<P><STRONG><a name="[cb]"></a>adsInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
</UL>

<P><STRONG><a name="[f6]"></a>errorCal</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = errorCal
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
</UL>

<P><STRONG><a name="[ca]"></a>adsDataRead</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adsDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReceByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquireInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInitvdd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1243GetValue
</UL>

<P><STRONG><a name="[f2]"></a>adsRegRead</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ads_acquire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReceByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsOffsetCal
</UL>

<P><STRONG><a name="[f3]"></a>adsRegWrite</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adsRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquireInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInitvdd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsOffsetCal
</UL>

<P><STRONG><a name="[f4]"></a>adsOffsetCal</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, ads_acquire.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSendByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swDelay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegWrite
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegRead
</UL>

<P><STRONG><a name="[e7]"></a>adsAcquireInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adsAcquireInit &rArr; adsDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsDataRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
</UL>

<P><STRONG><a name="[c9]"></a>adsInitvdd</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adsInitvdd &rArr; adsDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsDataRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1243GetValue
</UL>

<P><STRONG><a name="[e8]"></a>adsAcquire</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, ads_acquire.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adsAcquire &rArr; adsDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsDataRead
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorCal
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
</UL>

<P><STRONG><a name="[c2]"></a>EMU_CLK_Ini</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EMU_CLK_Ini &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_FT_Ana
</UL>

<P><STRONG><a name="[c4]"></a>EMU_GPIO_Ini</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EMU_GPIO_Ini &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_FT_Ana
</UL>

<P><STRONG><a name="[c3]"></a>EMU_Fun_Ini</STRONG> (Thumb, 1598 bytes, Stack size 8 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EMU_Fun_Ini &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_FT_Ana
</UL>

<P><STRONG><a name="[c6]"></a>EMU_Power_Test2</STRONG> (Thumb, 1690 bytes, Stack size 64 bytes, emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = EMU_Power_Test2 &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_FT_Ana
</UL>

<P><STRONG><a name="[f8]"></a>EMU_FT_Ana</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_GPIO_Ini
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Fun_Ini
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_CLK_Ini
</UL>

<P><STRONG><a name="[e2]"></a>ldo18_trim</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, ldo18_trim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ldo18_trim &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInitvdd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1243GetValue
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
</UL>

<P><STRONG><a name="[e3]"></a>rcl_trim</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, rcl_trim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rcl_trim &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitFail
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
</UL>

<P><STRONG><a name="[34]"></a>SAR_QC</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, sar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SAR_QC &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usDelay
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_all.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[fe]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
</UL>

<P><STRONG><a name="[122]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_ttywrch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>

<P><STRONG><a name="[123]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperLinePro
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocChipCheck
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_exec
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocChipCheck
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_DISLowPwr_FT
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_sram_FT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_FT
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adsAcquire
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[127]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[128]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[129]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[103]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[109]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[108]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra0TempAdjust
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcl_trim
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_adr_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816ctrl_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPumpDis
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_pwr_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_21Ena
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLcdIoCfg
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_QC
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAR_QC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDPump_QC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Power_Test2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_GPIO_Ini
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Fun_Ini
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_CLK_Ini
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownLoad
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMip
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i_mem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i_mem
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ra9103_initail
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_rd_i
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__swd_dp_wr_i
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPwrDown
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_img_run
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_sram_img_load
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_img_load
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_img_load
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_clrmip
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_fl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_check_ee
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_check
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soc_DISLowPwr_FT
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefEna
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocVrefDis
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocPump_31Ena
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_sram_FT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocLowPwr_FT
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocAVDDEna
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD3V3
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_UID_write
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim_write
</UL>

<P><STRONG><a name="[12c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[12d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[12e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[12f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>atf_mip_wait_timeout</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, swd_atf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atf_mip_wait_timeout &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_eeprom_wr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atf_flash_wr
</UL>

<P><STRONG><a name="[de]"></a>iso7816ctrl_read</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, spline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = iso7816ctrl_read &rArr; swd_connect &rArr; swd_debug_reset &rArr; swd_reset_st_chk &rArr; swd_mem_rd &rArr; swd_mem_rd_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_connect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp0LinePro
</UL>

<P><STRONG><a name="[f9]"></a>ldo18_trim_write</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, ldo18_trim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ldo18_trim_write &rArr; swd_mem_wr &rArr; swd_mem_wr_1k &rArr; swd_apacc_init &rArr; swd_dp_wr &rArr; __swd_dp_wr_i &rArr; swd_pkt_req &rArr; swd_parity_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_wr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_mem_rd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldo18_trim
</UL>

<P><STRONG><a name="[10e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[110]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
