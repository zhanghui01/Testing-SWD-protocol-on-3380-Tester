#include "spline.h"
#include "IC_Ctrl.h"
 
u32 LDO18_TRIM()    //need repeat trim,no once,is bug
{
  double vldo18[DUT_COUNT] = {0.0};
  RESET_SWD();
  PIN_INC(DVDD) 
  {   
    RELAY_OFF(PIN_DEF, ALL, 2mS);
    RELAY_ON(PIN_DEF, PMU, 2mS); 
    FORCE_I_PMU(PMU, 0uA, @1uA, @6V, 3V, ON, 2mS);
    JUDGE_V_PMU(PMU, IFVM, 1.65V, 1.98V, 2mS, 16, AVE, 50uS, , );
    FORCE_V_PMU(PMU, 0V, @6V, @1mA, 1mA, ON, 2mS);
    FORCE_V_PMU(PMU, 0V, @6V, @1mA, 1mA, OFF, 2mS);
    RELAY_OFF(PIN_DEF, PMU, 2mS);
  }
  SOCKET_INC           
  {
    if(PLAN_RESULT_MS[SOCKET] == PASS)
    {
      int ok=1,cnt = 0;
      while(ok)
      {
          cnt += 1;    
          vldo18[SOCKET] = RESULT_PIN(SOCKET,DVDD);
          trim_ldo18 = (signed)trim_ldo18 + (signed)((1.8 - vldo18[SOCKET]) / 0.005);  //is bug need repair_zhanghui_20190120
          TDO_PRINTF("Trim befrom vldo18=%0.3f,trim_ldo18=0x%08X\n",vldo18[SOCKET],trim_ldo18);
          if(trim_ldo18 & 0x80000000)
          {
            trim_ldo18 = 0;
          }
          else if(trim_ldo18 > 0x1f)
          {
            trim_ldo18 = 0x1f;
          }
          ldo18_trim_write(trim_ldo18);
          PIN_INC(DVDD) 
          {   
            RELAY_OFF(PIN_DEF, ALL, 2mS);
            RELAY_ON(PIN_DEF, PMU, 2mS); 
            FORCE_I_PMU(PMU, 0uA, @1uA, @6V, 3V, ON, 2mS);
            JUDGE_V_PMU(PMU, IFVM, 1.65V, 1.97V, 2mS, 16, AVE, 50uS, , );
            FORCE_V_PMU(PMU, 0V, @6V, @1mA, 1mA, ON, 2mS);
            FORCE_V_PMU(PMU, 0V, @6V, @1mA, 1mA, OFF, 2mS);
            RELAY_OFF(PIN_DEF, PMU, 2mS);
          }      
          vldo18[SOCKET] = RESULT_PIN(SOCKET,DVDD);
          TDO_PRINTF("After Trim vldo18=%0.3f,trim_ldo18=0x%08X\n",vldo18[SOCKET],trim_ldo18);
          if(((vldo18[SOCKET] > 1.8) && ((vldo18[SOCKET] - 1.8) < 0.01)) ||
             ((vldo18[SOCKET] < 1.8) && ((1.8 - vldo18[SOCKET]) < 0.01)) ||
             (vldo18[SOCKET] == 1.8))
          {
            ok = 0;
            TDO_PRINTF("LDO18_TRIM Successful,COUNT=%d\n",cnt);
          }          
          if(cnt > 17)
          {
            ok = 0;    
            PLAN_RESULT_MS[SOCKET] = FAIL;
            TDO_PRINTF("SITE %d LDO18_TRIM FAIL,COUNT=%d\n",SOCKET,cnt); 
          }
      }
    }
    else
    {
      JUDGE_VARIABLE(SOCKET,vldo18[SOCKET],1.65,1.97,"LDO_TRIM_FAIL");                 
    }
  }    
}

u32 ldo18_trim_write(u32 trim)
{
  u32 temp = 0;
  write_word(0xB1,0x00000000);
  write_word(0xA3,0x80000042);
  write_word(0x8B,0x40034030);
  write_word(0xBB,0x00000075);
  write_word(0x8B,0x40034054);
  write_word(0x9F,0x00000000);
  capture_word(0x9F,&temp);
  temp = 0xa5580000 + ((((temp & (~(0x1f << 7))) | ((trim & 0x1f) << 7))) & 0xffef);
  trim_ANALDO = (temp & 0xffff);
  write_word(0x8B,0x40034054);
  write_word(0xBB,trim_ANALDO);
  TDO_PRINTF("PWRSW_BIN trim_ANALDO= 0x%08X\n",trim_ANALDO);
  return 1;
}

u32  rcl_trim()
{
  u32 temp;
  u32 hosc_cnt = 327670*3;  //30ms
  
  RESET_SWD();
  write_word(0xB1,0x00000000);
  write_word(0xA3,0x80000042);
  write_word(0x8B,0x40034030);      //write address 0x40034030
  write_word(0xBB,0x00000082);      //to psw 0x82 write address 0x40034030
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write SOC PS fail\n");
    }
  }
  write_word(0x8B,0x40034020);
  write_word(0x9F,0x00000000);
  u32 ID = 0;
  capture_word(0x9F,&ID);
  TDO_PRINTF("Read SOC MOD = 0x%08X\n",ID);
  write_word(0x8B,0x40034020);
  write_word(0xBB,0x00000020);      //enable GPIO
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write MOD1 fail\n");
    }
  }
  write_word(0x8B,0x5000000C);
  write_word(0x9F,0x00000000);
  write_word(0x9F,0x00000020);
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Rd PCA1 fail\n");
    }
  }
  write_word(0x8B,0x5000000C);
  write_word(0xBB,0x0000F020);    //HOSC PAD configuration
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write PCA1 fail\n");
    }
  }
  write_word(0x8B,0x40034010);
  write_word(0x9F,0x00000000);
  write_word(0x9F,0x00000008);
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Rd PCA1 fail\n");
    }
  }
  write_word(0x8B,0x40034010);
  write_word(0xBB,0x00000000);//Enable HOSC
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write PCA1 fail\n");
    }
  }
  write_word(0x8B,0x4003407C);
  write_word(0xBB,0x03000000);//clear status
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write SOC TRIM_START fail\n");
    }
  }
  write_word(0x8B,0x40034078);
  write_word(0xBB,0x050EFFE2);    //ref clk=hosc, calc clk=rcl
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write SOC TRIM_START fail\n");
    }
  }
  write_word(0x8B,0x4003407C);
  write_word(0xBB,0x07000000);
  SOCKET_INC
  {
    if(PLAN_RESULT_MS[SOCKET] == FAIL)
    {
      TDO_PRINTF("rcl_trim Function Write SOC TRIM_START fail(0x4003407C,0x07000000)\n");
    }
  }
  int ok = 1,cnt = 0;
  while(ok)
  {
    cnt += 1;
    write_word(0x8B,0x4003407C);
    write_word(0x9F,0x00000000);
    capture_word(0x9F,&temp);
    TDO_PRINTF("capture_word rcl_trim = 0x%08X\n",  temp);
    if(temp & (1 << 24))
    {
      trim_rcl = ((float)(temp & 0xfffff) * 29491200.0 / (float)((float)(hosc_cnt+1))) ;  //31K
      SOCKET_INC{
        JUDGE_VARIABLE (SOCKET, trim_rcl, 24800, 37200, "trim_rcl_Fre");
      }
      TDO_PRINTF("rcl_trim = %d,count=%d\n",  trim_rcl,cnt);  
      trim_rcl = ( trim_rcl * 8) / 32768;
      TDO_PRINTF("rcl_trim = %d\n",  trim_rcl);
      ok = 0;
    }
    if(cnt > 100)
    {
      ok = 0;
      SOCKET_INC{
        PLAN_RESULT_MS[SOCKET] = FAIL;
      }
    }
  }
  SOCKET_INC{
   JUDGE_VARIABLE(SOCKET, trim_rcl, 6, 8, "trim_rcl_Value");
  } 
  return 1;
}

u32 UID_adr_read(u32 address)
{
  u32 data = 0;    
  write_word(0x8B,address);       //what want to read,send address
  write_word(0x9F,0x00000000);
  capture_word(0x9F,&data);        //capture read data 
  return data;
}

u32 sumGen32(u32* p_data,u32 length)
{
  u32 sum;
  u32 i; 
  sum = 0x0;
  for(i=0;i<length;i++)
  {
    sum = sum + *(p_data+i);   
  }  
  return sum;
}

u32 sp0LinePro(void)
{
    u32 i;
    u32 checksum;
    u32 temp;
    u32 iso7816_cks[DUT_COUNT] = {0};
    u32 chip_id;
    Judge_A_Or_D_Version(iso7816_cks);
    POWER_ON(POWER_VOL);
    LEVELS(UID_lvl, 3mS);
    swd_rate(1000nS);
    PIN_MODE(SWDIO, NRZ, EDGE, ENABLE, IO_NRZ, OFF);
    PIN_MODE(SWDCLK,RZ, EDGE, ENABLE, IO_NRZ, OFF);
    RELAY_OFF(SWD_PINS,ALL,1mS);
    RELAY_ON(SWD_PINS,PDCL,2mS); 
    
    RESET_SWD();
    write_word(0xB1,0x00000000);
    write_word(0xA3,0x80000042);
    write_word(0x8B,0x40034030);
    write_word(0xBB,0x00000082);
    write_word(0x8B,0x4003401C);
    write_word(0xBB,0x00000004);
    SOCKET_INC
    {
      chip_id = 0x0;
      TDO_PRINTF("SITE %d Chip Version = 0x%08X,A is 0x%08X ,D is 0x%08X;!!!\n",SOCKET,iso7816_cks[SOCKET],A_Version,D_Version);
      if(iso7816_cks[SOCKET] == D_Version)
      {
        chip_id = 0xD0000000;   //RA9103D0
      }
      else if(iso7816_cks[SOCKET] == A_Version)
      {
        chip_id = 0xA0000000;   //RA9103A0
      }
      else
      {
        PLAN_RESULT_MS[SOCKET] = FAIL;
        TDO_PRINTF("SITE %d Chip Version (0x%08X)is unNormal,Need 0x%08X or 0x%08X;Please Check it!!!\n",SOCKET,iso7816_cks[SOCKET],A_Version,D_Version);
      }
      if((chip_id & 0xf0000000)==0xA0000000)
      {
          u8 a_Version_spl0[PAGE_SIZE] = {
              F1 & 0xff,        (F1 >> 8) & 0xff,        (F1 >> 16) & 0xff, (F1 >> 24) & 0xff, 
              F2 & 0xff,        (F2 >> 8) & 0xff,        (F2 >> 16) & 0xff, (F2 >> 24) & 0xff, 
              F3 & 0xff,        (F3 >> 8) & 0xff,        (F3 >> 16) & 0xff, (F3 >> 24) & 0xff, 
              F4 & 0xff,        (F4 >> 8) & 0xff,        (F4 >> 16) & 0xff, (F4 >> 24) & 0xff, 
              ANAADC & 0xff,    (ANAADC >> 8) & 0xff,    ANACLK1 & 0xff,    (ANACLK1 >> 8) & 0xff, 
              ANACLK2 & 0xff,   (ANACLK2 >> 8) & 0xff,   ANALDO & 0xff,     (ANALDO >> 8) & 0xff, 
              ANABGR & 0xff,    (ANABGR >> 8) & 0xff,    ANAPSW & 0xff,     (ANAPSW >> 8) & 0xff, 
              0xff,             0xff,                    0xff,              0xff, 
              TPSCTRL & 0xff,   (TPSCTRL >> 8) & 0xff,   ADCTEST & 0xff,    (ADCTEST >> 8) & 0xff, 
              CACHECTRL & 0xff, (CACHECTRL >> 8) & 0xff, 0xff,              0xff, 
              0xff,             0xff,                    0xff,              0xff, 
              0xff,             0xff,                    0xff,              0xff, 
              0xff,             0xff,                    0xff,              0xff, 
              0xff,             0xff,                    0xff,              0xff, 
              0xff,             0xff,                    0xff,              0xff, 
              0xff,             0xff,                    0xff,              0xff
             };
        //==================   UID_code_mask  ================
          //FT_TEST_times
          a_Version_spl0[28] = ((0x3<<4)|(FT_times & 0xf));
          a_Version_spl0[29] = ((0x12) & 0xff);                 //V112.3
          //wafer_CHIP_ID 

          temp = UID_adr_read(WAFER_CHIPID);

          a_Version_spl0[38] = temp & 0xff;
          a_Version_spl0[39] = (temp >> 8) & 0xff;
          //wafer_serial_1  
          temp = UID_adr_read( WAFER_SERIAL_1_ADR );
          a_Version_spl0[40] =  temp & 0xff;
          a_Version_spl0[41] = (temp >> 8) & 0xff;
          //wafer_serial_2
          temp = UID_adr_read( WAFER_SERIAL_2_ADR );
          a_Version_spl0[42] = temp & 0xff;
          a_Version_spl0[43] = (temp >> 8) & 0xff;
          //wafer_number 
          temp = UID_adr_read( WAFER_NUM_ADR );  
          a_Version_spl0[44] = temp & 0xff;
          a_Version_spl0[45] = (temp >> 8) & 0xff;
          //wafer_x  
          temp = UID_adr_read( WAFER_X_ADR );    
          a_Version_spl0[46] = temp & 0xff;
          a_Version_spl0[47] = (temp >> 8) & 0xff;
          //wafer_y 
          temp = UID_adr_read( WAFER_Y_ADR );  
          a_Version_spl0[48] = temp & 0xff;
          a_Version_spl0[49] = (temp >> 8) & 0xff;
          //wafer_cp_result 
          temp = UID_adr_read( WAFER_RESULT_ADR );  
          a_Version_spl0[50] = temp & 0xff;
          a_Version_spl0[51] = (temp >> 8) & 0xff;

        checksum = 0 - sumGen32((u32 *)a_Version_spl0,15);
        TDO_PRINTF("SITE %d checksum =0x%08X\n",checksum);
        
        a_Version_spl0[PAGE_SIZE - 1] = (checksum >> 24) & 0xff;
        a_Version_spl0[PAGE_SIZE - 2] = (checksum >> 16) & 0xff;
        a_Version_spl0[PAGE_SIZE - 3] = (checksum >> 8) & 0xff;
        a_Version_spl0[PAGE_SIZE - 4] = checksum & 0xff;
            
        //If read back the same. Do not Program again.           
        for(i=0;i<(PAGE_SIZE/4);i++)
        {
          write_word(0x8B,EEPROM_SP0_BASE+i*4);
          write_word(0x9F,0x00000000);
          capture_word(0x9F,&temp);
          u32 spl0_temp = (a_Version_spl0[4*(i+1)-1] << 24) + 
          (a_Version_spl0[4*(i+1)-2] << 16) + (a_Version_spl0[4*(i+1)-3] << 8) +
          (a_Version_spl0[4*(i+1)-4]);
          if(temp != spl0_temp)
          {
            break;
          }
        }

        if(i == (PAGE_SIZE/4))
        {
          TDO_PRINTF("SPLINEPRO MESSAGE is same,Need't write again\n");
        } 
        else
        {
        
          //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET) ,0xfeed0000) ;   // lock out protection
          write_word(0xB1,0x00000000);
          write_word(0xA3,0x80000042);
          write_word(0x8B,0x08800014);
          write_word(0xBB,0xFEED0000);

          //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );//Wait Not Busy.
          u32 ID_temp = 0;
          int cnt = 0;
          do
          { 
            cnt += 1;
            write_word(0x8B,0x08800008);
            write_word(0x9F,0x00000000);
            capture_word(0x9F,&ID_temp);          
          }while((ID_temp != 0x0000003E) & cnt < 10);

          //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET) ,ECMD_HVPL) ;      // clear HVPL
          write_word(0x8B,0x08800000);
          write_word(0xBB,0xFEED0004);
          // config 8bit write
          write_word(0xB1,0x00000000);
          write_word(0xA3,0x80000040);     //enable 8bit write      
          for( i=0 ;i<PAGE_SIZE ;i++ )
          {
            write_word(0x8B,(EEPROM_BASE_REMAP3+i)); 
            write_word(0xBB,*(a_Version_spl0+i));// write HVPL
          }       

          //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PGA_OFFSET) ,EE_SPL0_PGA) ;      //Set program page num.
          write_word(0xB1,0x00000000);
          write_word(0x87,0x00000000);
          write_word(0xA3,0x80000042);
          write_word(0x8B,0x08800004);//EEPROM_BASE_REMAP3+EEPROM_PGA_OFFSET
          write_word(0xBB,0x00000300); //Set program page num.

          //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.          
          ID_temp = 0;
          cnt = 0;
          do
          { 
            cnt += 1;
            write_word(0x8B,0x08800008);
            write_word(0x9F,0x00000000);
            capture_word(0x9F,&ID_temp);          
          }while((ID_temp != 0x0000002E) & cnt < 10);

          //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET) ,ECMD_PE) ;         //Page Erase.
          write_word(0x8B,0x08800000);
          write_word(0xBB,0xFEED000B);

          //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.          
          ID_temp = 0;
          cnt = 0;
          do
          { 
            cnt += 1;
            write_word(0x8B,0x08800008);
            write_word(0x9F,0x00000000);
            capture_word(0x9F,&ID_temp);          
          }while((ID_temp != 0x0000002E) & cnt < 10);

          //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET) ,ECMD_PP) ;         //Page Program. 
          write_word(0x8B,0x08800000);
          write_word(0xBB,0xFEED000F);

          //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET) ,0xfeedffff) ;   // lock protection  
          write_word(0x8B,0x08800014);
          write_word(0xBB,0xFEEDFFFF);

          //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.  
          ID_temp = 0;
          cnt = 0;
          do
          { 
            cnt += 1;
            write_word(0x8B,0x08800008);
            write_word(0x9F,0x00000000);
            capture_word(0x9F,&ID_temp);          
          }while((ID_temp != 0x0000002E) & cnt < 10);

          //Read Back and Confirm EEPROM Data right.  
          for(i=0;i<(PAGE_SIZE/4);i++)
          {
           // temp = mem_rd_reg32(EEPROM_SP0_BASE+i*4);
            write_word(0x8B,EEPROM_SP0_BASE+i*4);
            write_word(0x9F,0x00000000);
            capture_word(0x9F,&temp);
            u32 spl0_temp = (a_Version_spl0[4*(i+1)-1] << 24) + 
            (a_Version_spl0[4*(i+1)-2] << 16) + (a_Version_spl0[4*(i+1)-3] << 8) +
            (a_Version_spl0[4*(i+1)-4]);
            if(PRINT)
              TDO_PRINTF("TEMP=0x%08X,a_Version_spl0[%d] = 0x%08X\n",temp,i,a_Version_spl0[i]);
            if(temp != spl0_temp)
            {
              PLAN_RESULT_MS[SOCKET] = FAIL;
              TDO_PRINTF("TEMP=0x%08X,but a_Version_spl0[%d] = 0x%08X\n",temp,i,spl0_temp);
            }
           }
         }
       }
       else if((chip_id & 0xf0000000)==0xD0000000)
       {
          u8 d_Version_spl0[PAGE_SIZE] = {
          F1 & 0xff,        (F1 >> 8) & 0xff,        (F1 >> 16) & 0xff, (F1 >> 24) & 0xff, 
          F2 & 0xff,        (F2 >> 8) & 0xff,        (F2 >> 16) & 0xff, (F2 >> 24) & 0xff, 
          F3 & 0xff,        (F3 >> 8) & 0xff,        (F3 >> 16) & 0xff, (F3 >> 24) & 0xff, 
          F4 & 0xff,        (F4 >> 8) & 0xff,        (F4 >> 16) & 0xff, (F4 >> 24) & 0xff, 
          ANAADC & 0xff,    (ANAADC >> 8) & 0xff,    ANACLK1 & 0xff,    (ANACLK1 >> 8) & 0xff, 
          ANACLK2_B & 0xff,   (ANACLK2_B >> 8) & 0xff,   ANALDO_B & 0xff,     (ANALDO_B >> 8) & 0xff, 
          ANABGR_B & 0xff,    (ANABGR_B >> 8) & 0xff,    ANAPSW_B & 0xff,     (ANAPSW_B >> 8) & 0xff, 
          0xff,             0xff,                    0xff,              0xff, 
          TPSCTRL & 0xff,   (TPSCTRL >> 8) & 0xff,   ADCTEST & 0xff,    (ADCTEST >> 8) & 0xff, 
          CACHECTRL & 0xff, (CACHECTRL >> 8) & 0xff, SOFT_CHIPID_B & 0xff,            (SOFT_CHIPID_B >> 8) &  0xff, 
          0xff,             0xff,                    0xff,              0xff, 
          0xff,             0xff,                    0xff,              0xff, 
          0xff,             0xff,                    0xff,              0xff, 
          0xff,             0xff,                    0xff,              0xff, 
          0xff,             0xff,                    0xff,              0xff, 
          0xff,             0xff,                    0xff,              0xff
        };
          SET_FAIL_BIN(HW_SPLINE_FAIL,SW_LDO18_TRIM_FAIL);
          LDO18_TRIM();
          if( ((trim_ANALDO >>4) & 0x1) != 0 )
          {
            TDO_PRINTF("powswh_bin = %d,trim_ANALDO=%x! \n",2,trim_ANALDO);
            PLAN_RESULT_MS[SOCKET] = FAIL;
          }
          else
          {
              d_Version_spl0[22] = (( ANALDO_B & 0xf06f)  | (trim_ANALDO & 0x0f90) )& 0xff;
              d_Version_spl0[23] = (((ANALDO_B & 0xf06f)  | (trim_ANALDO & 0x0f90) ) >> 8) & 0xff; 
              SET_FAIL_BIN(HW_SPLINE_FAIL,SW_RCL_TRIM_FAIL);
              rcl_trim();

              d_Version_spl0[20] = (( ANACLK2_B & 0x07ff) | ((trim_rcl & 0x1f) << 11)) & 0xff;
              d_Version_spl0[21] = (((ANACLK2_B & 0x07ff) | ((trim_rcl & 0x1f) << 11)) >> 8) & 0xff;

            //==================   UID_code_mask  ================
              write_word(0xB1,0x00000000);
              write_word(0xA3,0x80000042);
              write_word(0x8B,0x40034030);
              write_word(0xBB,0x00000082);
              write_word(0x8B,0x4003401C);
              write_word(0xBB,0x00000004);
            //FT_TEST_times
              d_Version_spl0[28] = ((0x3<<4)|(FT_times & 0xf));
              d_Version_spl0[29] = ((0x12) & 0xff);                 //V112.3
            //wafer_CHIP_ID 
              temp = UID_adr_read( WAFER_CHIPID );
              temp = temp >> 16;
              if(PRINT)
                TDO_PRINTF("WAFER_CHIPID =0x%08X\n",temp);
              if(temp == 0xffff)
              {
                d_Version_spl0[38] = SOFT_CHIPID_B & 0xff;
                d_Version_spl0[39] = (SOFT_CHIPID_B >> 8) & 0xff;
              } 
              else if((temp == 0x000B)||(temp == 0x00B1))
              {
                d_Version_spl0[38] = temp & 0xff;
                d_Version_spl0[39] = (temp >> 8) & 0xff;
              }     
              else
              {
                SET_FAIL_BIN(HW_SPLINE_FAIL,SW_VERSION_FAIL);
                PLAN_RESULT_MS[SOCKET] = FAIL;
              }
              temp = UID_adr_read( WAFER_SERIAL_1_ADR );
              if(PRINT)
                TDO_PRINTF("WAFER_SERIAL_1_ADR =0x%08X\n",temp);

              d_Version_spl0[40] =  temp & 0xff;
              d_Version_spl0[41] = (temp >> 8) & 0xff;
              //wafer_serial_2
              temp = UID_adr_read( WAFER_SERIAL_2_ADR );
              if(PRINT)
                TDO_PRINTF("WAFER_SERIAL_2_ADR =0x%08X\n",temp);
              d_Version_spl0[42] = temp & 0xff;
              d_Version_spl0[43] = (temp >> 8) & 0xff;
              //wafer_number 
              temp = UID_adr_read( WAFER_NUM_ADR );
              if(PRINT)
                TDO_PRINTF("WAFER_NUM_ADR =0x%08X\n",temp);
              d_Version_spl0[44] = temp & 0xff;
              d_Version_spl0[45] = (temp >> 8) & 0xff;
              //wafer_x  
              temp = UID_adr_read( WAFER_X_ADR ); 
              if(PRINT)
                TDO_PRINTF("WAFER_X_ADR =0x%08X\n",temp);
              d_Version_spl0[46] = temp & 0xff;
              d_Version_spl0[47] = (temp >> 8) & 0xff;
              //wafer_y 
              temp=UID_adr_read( WAFER_Y_ADR );  
              if(PRINT)
                TDO_PRINTF("WAFER_Y_ADR =0x%08X\n",temp);
              d_Version_spl0[48] = temp & 0xff;
              d_Version_spl0[49] = (temp >> 8) & 0xff;
              //wafer_cp_result 
              temp=UID_adr_read( WAFER_RESULT_ADR ); 
              if(PRINT)
                TDO_PRINTF("WAFER_RESULT_ADR =0x%08X\n",temp);
              d_Version_spl0[50] = temp & 0xff;
              d_Version_spl0[51] = (temp >> 8) & 0xff;

              checksum = 0 - sumGen32((u32 *)d_Version_spl0,15);

              d_Version_spl0[PAGE_SIZE - 1] = (checksum >> 24) & 0xff;
              d_Version_spl0[PAGE_SIZE - 2] = (checksum >> 16) & 0xff;
              d_Version_spl0[PAGE_SIZE - 3] = (checksum >> 8) & 0xff;
              d_Version_spl0[PAGE_SIZE - 4] = checksum & 0xff;

            //If read back the same. Do not Program again.         
            for(i=0;i<(PAGE_SIZE/4);i++)
            {
              write_word(0x8B,EEPROM_SP0_BASE+i*4);
              write_word(0x9F,0x00000000);
              capture_word(0x9F,&temp);
              u32 spl0_temp = (d_Version_spl0[4*(i+1)-1] << 24) + 
              (d_Version_spl0[4*(i+1)-2] << 16) + (d_Version_spl0[4*(i+1)-3] << 8) +
              (d_Version_spl0[4*(i+1)-4]);
              if(PRINT)
                TDO_PRINTF("TEMP=0x%08X,d_Version_spl0[%d] = 0x%08X,spl0_temp=0x%08X\n",temp,i,d_Version_spl0[i],spl0_temp);
              if(temp != spl0_temp)
              {
                i = 500;
              }
            }
            if(i == (PAGE_SIZE/4))
            {
              TDO_PRINTF("SPLINEPRO MESSAGE is same,Need't write again\n");
            } 
            else
            {
              //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET) ,0xfeed0000) ;   // lock out protection
              write_word(0xB1,0x00000000);
              write_word(0xA3,0x80000042);
              write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET);
              write_word(0xBB,0xFEED0000); 

              //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.        
              u32 ID_temp = 0;
              int cnt = 0;
              do
              { 
                cnt += 1;
                write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET);
                write_word(0x9F,0x00000000);
                capture_word(0x9F,&ID_temp);          
              }while((ID_temp != 0x0000003E) & cnt < 10);
              if(PRINT)
                TDO_PRINTF("ID_temp=0x%08X,cnt = %d\n",ID_temp,cnt);

              //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET) ,ECMD_HVPL) ;      // clear HVPL
              write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET);
              write_word(0xBB,0xFEED0004);
              // config 8bit write
              write_word(0xB1,0x00000000);
              write_word(0xA3,0x80000040);     //enable 8bit write 
              for( i=0 ;i<PAGE_SIZE ;i++ )
              {
                //mem_wr_reg8((EEPROM_BASE_REMAP3+i) ,*(d_Version_spl0+i)) ;  // write HVPL
                write_word(0x8B,(EEPROM_BASE_REMAP3+i)); 
                write_word(0xBB,*(d_Version_spl0+i));// write HVPL
                if(PRINT)
                  TDO_PRINTF("EEPROM_BASE_REMAP3 address is:0x%08X,d_Version_spl0[%d] = 0x%08X\n",EEPROM_BASE_REMAP3+i,i,d_Version_spl0[i]);
              }       

              //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PGA_OFFSET) ,EE_SPL0_PGA) ;      //Set program page num.
              write_word(0xB1,0x00000000);
              write_word(0x87,0x00000000);
              write_word(0xA3,0x80000042);
              write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_PGA_OFFSET);//EEPROM_BASE_REMAP3+EEPROM_PGA_OFFSET
              write_word(0xBB,0x00000300); //EE_SPL0_PGA,Set program page num.

              // while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.          
              ID_temp = 0;
              cnt = 0;
              do
              { 
                cnt += 1;
                write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET);
                write_word(0x9F,0x00000000);
                capture_word(0x9F,&ID_temp);
              }while((ID_temp != 0x0000002E) & cnt < 10);
              if(PRINT)
                TDO_PRINTF("ID_temp=0x%08X,cnt = %d\n",ID_temp,cnt);
              //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET) ,ECMD_PE) ;         //Page Erase.
              write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET);
              write_word(0xBB,0xFEED000B);

              //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.          
              ID_temp = 0;
              cnt = 0;
              do
              { 
                cnt += 1;
                write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET);
                write_word(0x9F,0x00000000);
                capture_word(0x9F,&ID_temp);          
              }while((ID_temp != 0x0000002E) & cnt < 10);
              if(PRINT)
                TDO_PRINTF("ID_temp=0x%08X,cnt = %d\n",ID_temp,cnt);
              // mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET) ,ECMD_PP) ;         //Page Program. 
              write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_CMD_OFFSET);
              write_word(0xBB,0xFEED000F);

              //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET) ,0xfeedffff) ;   // lock protection  
              write_word(0x8B,EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET);
              write_word(0xBB,0xFEEDFFFF);

              //mem_wr_reg32((EEPROM_BASE_REMAP3+EEPROM_PROT_OFFSET) ,0xfeedffff) ;   // lock protection  

              //while( mem_rd_reg32((EEPROM_BASE_REMAP3+EEPROM_STA_OFFSET)) & 0x1 );  //Wait Not Busy.  
              ID_temp = 0;
              cnt = 0;
              do
              { 
                cnt += 1;
                write_word(0x8B,0x08800008);
                write_word(0x9F,0x00000000);
                capture_word(0x9F,&ID_temp);          
              }while((ID_temp != 0x0000002E) & cnt < 10);
              if(PRINT)
                TDO_PRINTF("ID_temp=0x%08X,cnt = %d\n",ID_temp,cnt);                        
              //Read Back and Confirm EEPROM Data right.
              for(i=0;i<(PAGE_SIZE/4);i++)
              {
                // temp = mem_rd_reg32(EEPROM_SP0_BASE+i*4);
                write_word(0x8B,EEPROM_SP0_BASE+i*4);
                write_word(0x9F,0x00000000);
                capture_word(0x9F,&temp);
                u32 spl0_temp = (d_Version_spl0[4*(i+1)-1] << 24) + 
                (d_Version_spl0[4*(i+1)-2] << 16) + (d_Version_spl0[4*(i+1)-3] << 8) +
                (d_Version_spl0[4*(i+1)-4]);
                if(PRINT)
                TDO_PRINTF("TEMP=0x%08X,d_Version_spl0[%d] = 0x%08X,spl0_temp=0x%08X\n",temp,i,d_Version_spl0[i],spl0_temp);
                if(temp != spl0_temp)
                {
                  PLAN_RESULT_MS[SOCKET] = FAIL;
                  TDO_PRINTF("TEMP=0x%08X,but d_Version_spl0[%d] = 0x%08X\n",temp,i,d_Version_spl0[i]);
                }
              }
            }
        }
      }
    }
  POWER_OFF();  
  return 1;
}
